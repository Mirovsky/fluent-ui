// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine.UIElements;

    public static class FluentUITabViewExtensions
    {
        public static TVisualElement ReorderTab<TVisualElement>(this TVisualElement t, Int32 from, Int32 to) where TVisualElement : TabView
        {
            t.ReorderTab(from, to);

            return t;
        }

        public static TVisualElement ActiveTab<TVisualElement>(this TVisualElement t, Tab activeTab) where TVisualElement : TabView
        {
            t.activeTab = activeTab;

            return t;
        }

        public static TVisualElement SelectedTabIndex<TVisualElement>(this TVisualElement t, Int32 selectedTabIndex) where TVisualElement : TabView
        {
            t.selectedTabIndex = selectedTabIndex;

            return t;
        }

        public static TVisualElement Reorderable<TVisualElement>(this TVisualElement t, Boolean reorderable) where TVisualElement : TabView
        {
            t.reorderable = reorderable;

            return t;
        }

        public static TVisualElement BindReorderable<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TabView
        {
            t.SetBinding(Properties.reorderable, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement ActiveTabChanged<TVisualElement>(this TVisualElement t, Action<Tab, Tab> activeTabChanged) where TVisualElement : TabView
        {
            t.activeTabChanged += activeTabChanged;

            return t;
        }

        public static TVisualElement TabReordered<TVisualElement>(this TVisualElement t, Action<Int32, Int32> tabReordered) where TVisualElement : TabView
        {
            t.tabReordered += tabReordered;

            return t;
        }

        public static TVisualElement TabClosed<TVisualElement>(this TVisualElement t, Action<Tab, Int32> tabClosed) where TVisualElement : TabView
        {
            t.tabClosed += tabClosed;

            return t;
        }
    }
}
