// <auto-generated/>

namespace FluentUI
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using UnityEngine.UIElements;
    
    public static class FluentUIBaseVerticalCollectionViewExtensions
    {
        public static TVisualElement RefreshItem<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : BaseVerticalCollectionView
        {
            t.RefreshItem(index);
            
            return t;
        }
        
        public static TVisualElement RefreshItems<TVisualElement>(this TVisualElement t) where TVisualElement : BaseVerticalCollectionView
        {
            t.RefreshItems();
            
            return t;
        }
        
        public static TVisualElement Rebuild<TVisualElement>(this TVisualElement t) where TVisualElement : BaseVerticalCollectionView
        {
            t.Rebuild();
            
            return t;
        }
        
        public static TVisualElement ScrollTo<TVisualElement>(this TVisualElement t, VisualElement visualElement) where TVisualElement : BaseVerticalCollectionView
        {
            t.ScrollTo(visualElement);
            
            return t;
        }
        
        public static TVisualElement ScrollToItem<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : BaseVerticalCollectionView
        {
            t.ScrollToItem(index);
            
            return t;
        }
        
        public static TVisualElement ScrollToItemById<TVisualElement>(this TVisualElement t, Int32 id) where TVisualElement : BaseVerticalCollectionView
        {
            t.ScrollToItemById(id);
            
            return t;
        }
        
        public static TVisualElement AddToSelection<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : BaseVerticalCollectionView
        {
            t.AddToSelection(index);
            
            return t;
        }
        
        public static TVisualElement RemoveFromSelection<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : BaseVerticalCollectionView
        {
            t.RemoveFromSelection(index);
            
            return t;
        }
        
        public static TVisualElement Selection<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetSelection(index);
            
            return t;
        }
        
        public static TVisualElement Selection<TVisualElement>(this TVisualElement t, IEnumerable<Int32> indices) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetSelection(indices);
            
            return t;
        }
        
        public static TVisualElement SelectionWithoutNotify<TVisualElement>(this TVisualElement t, IEnumerable<Int32> indices) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetSelectionWithoutNotify(indices);
            
            return t;
        }
        
        public static TVisualElement ClearSelection<TVisualElement>(this TVisualElement t) where TVisualElement : BaseVerticalCollectionView
        {
            t.ClearSelection();
            
            return t;
        }
        
        public static TVisualElement ItemsSource<TVisualElement>(this TVisualElement t, IList itemsSource) where TVisualElement : BaseVerticalCollectionView
        {
            t.itemsSource = itemsSource;
            
            return t;
        }
        
        public static TVisualElement BindItemsSource<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.itemsSource, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement SelectionType<TVisualElement>(this TVisualElement t, SelectionType selectionType) where TVisualElement : BaseVerticalCollectionView
        {
            t.selectionType = selectionType;
            
            return t;
        }
        
        public static TVisualElement BindSelectionType<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.selectionType, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement SelectedIndex<TVisualElement>(this TVisualElement t, Int32 selectedIndex) where TVisualElement : BaseVerticalCollectionView
        {
            t.selectedIndex = selectedIndex;
            
            return t;
        }
        
        public static TVisualElement BindSelectedIndex<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.selectedIndex, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ShowBorder<TVisualElement>(this TVisualElement t, Boolean showBorder) where TVisualElement : BaseVerticalCollectionView
        {
            t.showBorder = showBorder;
            
            return t;
        }
        
        public static TVisualElement BindShowBorder<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.showBorder, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Reorderable<TVisualElement>(this TVisualElement t, Boolean reorderable) where TVisualElement : BaseVerticalCollectionView
        {
            t.reorderable = reorderable;
            
            return t;
        }
        
        public static TVisualElement BindReorderable<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.reorderable, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement HorizontalScrollingEnabled<TVisualElement>(this TVisualElement t, Boolean horizontalScrollingEnabled) where TVisualElement : BaseVerticalCollectionView
        {
            t.horizontalScrollingEnabled = horizontalScrollingEnabled;
            
            return t;
        }
        
        public static TVisualElement BindHorizontalScrollingEnabled<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.horizontalScrollingEnabled, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ShowAlternatingRowBackgrounds<TVisualElement>(this TVisualElement t, AlternatingRowBackground showAlternatingRowBackgrounds) where TVisualElement : BaseVerticalCollectionView
        {
            t.showAlternatingRowBackgrounds = showAlternatingRowBackgrounds;
            
            return t;
        }
        
        public static TVisualElement BindShowAlternatingRowBackgrounds<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.showAlternatingRowBackgrounds, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement VirtualizationMethod<TVisualElement>(this TVisualElement t, CollectionVirtualizationMethod virtualizationMethod) where TVisualElement : BaseVerticalCollectionView
        {
            t.virtualizationMethod = virtualizationMethod;
            
            return t;
        }
        
        public static TVisualElement BindVirtualizationMethod<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.virtualizationMethod, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement FixedItemHeight<TVisualElement>(this TVisualElement t, Single fixedItemHeight) where TVisualElement : BaseVerticalCollectionView
        {
            t.fixedItemHeight = fixedItemHeight;
            
            return t;
        }
        
        public static TVisualElement BindFixedItemHeight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseVerticalCollectionView
        {
            t.SetBinding(Properties.fixedItemHeight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ItemsChosen<TVisualElement>(this TVisualElement t, Action<IEnumerable<System.Object>> itemsChosen) where TVisualElement : BaseVerticalCollectionView
        {
            t.itemsChosen += itemsChosen;
            
            return t;
        }
        
        public static TVisualElement SelectionChanged<TVisualElement>(this TVisualElement t, Action<IEnumerable<System.Object>> selectionChanged) where TVisualElement : BaseVerticalCollectionView
        {
            t.selectionChanged += selectionChanged;
            
            return t;
        }
        
        public static TVisualElement SelectedIndicesChanged<TVisualElement>(this TVisualElement t, Action<IEnumerable<Int32>> selectedIndicesChanged) where TVisualElement : BaseVerticalCollectionView
        {
            t.selectedIndicesChanged += selectedIndicesChanged;
            
            return t;
        }
        
        public static TVisualElement ItemIndexChanged<TVisualElement>(this TVisualElement t, Action<Int32, Int32> itemIndexChanged) where TVisualElement : BaseVerticalCollectionView
        {
            t.itemIndexChanged += itemIndexChanged;
            
            return t;
        }
        
        public static TVisualElement ItemsSourceChanged<TVisualElement>(this TVisualElement t, Action itemsSourceChanged) where TVisualElement : BaseVerticalCollectionView
        {
            t.itemsSourceChanged += itemsSourceChanged;
            
            return t;
        }
        
        public static TVisualElement CanStartDrag<TVisualElement>(this TVisualElement t, Func<CanStartDragArgs, Boolean> canStartDrag) where TVisualElement : BaseVerticalCollectionView
        {
            t.canStartDrag += canStartDrag;
            
            return t;
        }
        
        public static TVisualElement SetupDragAndDrop<TVisualElement>(this TVisualElement t, Func<SetupDragAndDropArgs, StartDragArgs> setupDragAndDrop) where TVisualElement : BaseVerticalCollectionView
        {
            t.setupDragAndDrop += setupDragAndDrop;
            
            return t;
        }
        
        public static TVisualElement DragAndDropUpdate<TVisualElement>(this TVisualElement t, Func<HandleDragAndDropArgs, DragVisualMode> dragAndDropUpdate) where TVisualElement : BaseVerticalCollectionView
        {
            t.dragAndDropUpdate += dragAndDropUpdate;
            
            return t;
        }
        
        public static TVisualElement HandleDrop<TVisualElement>(this TVisualElement t, Func<HandleDragAndDropArgs, DragVisualMode> handleDrop) where TVisualElement : BaseVerticalCollectionView
        {
            t.handleDrop += handleDrop;
            
            return t;
        }
    }
}
