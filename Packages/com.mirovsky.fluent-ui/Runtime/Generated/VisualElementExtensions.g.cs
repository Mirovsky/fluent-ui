// <auto-generated/>

namespace FluentUI
{
    using System;
    using Unity.Properties;
    using UnityEngine.UIElements;

    public static class FluentUIVisualElementExtensions
    {
        public static TVisualElement Focus<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.Focus();

            return t;
        }

        public static TVisualElement SendEvent<TVisualElement>(this TVisualElement t, EventBase e) where TVisualElement : VisualElement
        {
            t.SendEvent(e);

            return t;
        }

        public static TVisualElement Enabled<TVisualElement>(this TVisualElement t, Boolean value) where TVisualElement : VisualElement
        {
            t.SetEnabled(value);

            return t;
        }

        public static TVisualElement MarkDirtyRepaint<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.MarkDirtyRepaint();

            return t;
        }

        public static TVisualElement ClearClassList<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.ClearClassList();

            return t;
        }

        public static TVisualElement AddToClassList<TVisualElement>(this TVisualElement t, String className) where TVisualElement : VisualElement
        {
            t.AddToClassList(className);

            return t;
        }

        public static TVisualElement RemoveFromClassList<TVisualElement>(this TVisualElement t, String className) where TVisualElement : VisualElement
        {
            t.RemoveFromClassList(className);

            return t;
        }

        public static TVisualElement ToggleInClassList<TVisualElement>(this TVisualElement t, String className) where TVisualElement : VisualElement
        {
            t.ToggleInClassList(className);

            return t;
        }

        public static TVisualElement EnableInClassList<TVisualElement>(this TVisualElement t, String className, Boolean enable) where TVisualElement : VisualElement
        {
            t.EnableInClassList(className, enable);

            return t;
        }

        public static TVisualElement Binding<TVisualElement>(this TVisualElement t, BindingId bindingId, Binding binding) where TVisualElement : VisualElement
        {
            t.SetBinding(bindingId, binding);

            return t;
        }

        public static TVisualElement ClearBinding<TVisualElement>(this TVisualElement t, BindingId bindingId) where TVisualElement : VisualElement
        {
            t.ClearBinding(bindingId);

            return t;
        }

        public static TVisualElement ClearBindings<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.ClearBindings();

            return t;
        }

        public static TVisualElement Add<TVisualElement>(this TVisualElement t, VisualElement child) where TVisualElement : VisualElement
        {
            t.Add(child);

            return t;
        }

        public static TVisualElement Insert<TVisualElement>(this TVisualElement t, Int32 index, VisualElement element) where TVisualElement : VisualElement
        {
            t.Insert(index, element);

            return t;
        }

        public static TVisualElement Remove<TVisualElement>(this TVisualElement t, VisualElement element) where TVisualElement : VisualElement
        {
            t.Remove(element);

            return t;
        }

        public static TVisualElement RemoveAt<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : VisualElement
        {
            t.RemoveAt(index);

            return t;
        }

        public static TVisualElement Clear<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.Clear();

            return t;
        }

        public static TVisualElement Sort<TVisualElement>(this TVisualElement t, Comparison<VisualElement> comp) where TVisualElement : VisualElement
        {
            t.Sort(comp);

            return t;
        }

        public static TVisualElement BringToFront<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.BringToFront();

            return t;
        }

        public static TVisualElement SendToBack<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.SendToBack();

            return t;
        }

        public static TVisualElement PlaceBehind<TVisualElement>(this TVisualElement t, VisualElement sibling) where TVisualElement : VisualElement
        {
            t.PlaceBehind(sibling);

            return t;
        }

        public static TVisualElement PlaceInFront<TVisualElement>(this TVisualElement t, VisualElement sibling) where TVisualElement : VisualElement
        {
            t.PlaceInFront(sibling);

            return t;
        }

        public static TVisualElement RemoveFromHierarchy<TVisualElement>(this TVisualElement t) where TVisualElement : VisualElement
        {
            t.RemoveFromHierarchy();

            return t;
        }

        public static TVisualElement ViewDataKey<TVisualElement>(this TVisualElement t, String viewDataKey) where TVisualElement : VisualElement
        {
            t.viewDataKey = viewDataKey;

            return t;
        }

        public static TVisualElement BindViewDataKey<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.viewDataKey, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement UserData<TVisualElement>(this TVisualElement t, System.Object userData) where TVisualElement : VisualElement
        {
            t.userData = userData;

            return t;
        }

        public static TVisualElement BindUserData<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.userData, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement DisablePlayModeTint<TVisualElement>(this TVisualElement t, Boolean disablePlayModeTint) where TVisualElement : VisualElement
        {
            t.disablePlayModeTint = disablePlayModeTint;

            return t;
        }

        public static TVisualElement BindDisablePlayModeTint<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.disablePlayModeTint, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement UsageHints<TVisualElement>(this TVisualElement t, UsageHints usageHints) where TVisualElement : VisualElement
        {
            t.usageHints = usageHints;

            return t;
        }

        public static TVisualElement BindUsageHints<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.usageHints, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement PickingMode<TVisualElement>(this TVisualElement t, PickingMode pickingMode) where TVisualElement : VisualElement
        {
            t.pickingMode = pickingMode;

            return t;
        }

        public static TVisualElement BindPickingMode<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.pickingMode, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement Name<TVisualElement>(this TVisualElement t, String name) where TVisualElement : VisualElement
        {
            t.name = name;

            return t;
        }

        public static TVisualElement BindName<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.name, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement EnabledSelf<TVisualElement>(this TVisualElement t, Boolean enabledSelf) where TVisualElement : VisualElement
        {
            t.enabledSelf = enabledSelf;

            return t;
        }

        public static TVisualElement BindEnabledSelf<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.enabledSelf, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement LanguageDirection<TVisualElement>(this TVisualElement t, LanguageDirection languageDirection) where TVisualElement : VisualElement
        {
            t.languageDirection = languageDirection;

            return t;
        }

        public static TVisualElement BindLanguageDirection<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.languageDirection, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement Visible<TVisualElement>(this TVisualElement t, Boolean visible) where TVisualElement : VisualElement
        {
            t.visible = visible;

            return t;
        }

        public static TVisualElement BindVisible<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.visible, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement GenerateVisualContent<TVisualElement>(this TVisualElement t, Action<MeshGenerationContext> generateVisualContent) where TVisualElement : VisualElement
        {
            t.generateVisualContent = generateVisualContent;

            return t;
        }

        public static TVisualElement DataSource<TVisualElement>(this TVisualElement t, System.Object dataSource) where TVisualElement : VisualElement
        {
            t.dataSource = dataSource;

            return t;
        }

        public static TVisualElement BindDataSource<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.dataSource, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement DataSourcePath<TVisualElement>(this TVisualElement t, PropertyPath dataSourcePath) where TVisualElement : VisualElement
        {
            t.dataSourcePath = dataSourcePath;

            return t;
        }

        public static TVisualElement BindDataSourcePath<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.dataSourcePath, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement DataSourceType<TVisualElement>(this TVisualElement t, Type dataSourceType) where TVisualElement : VisualElement
        {
            t.dataSourceType = dataSourceType;

            return t;
        }

        public static TVisualElement Tooltip<TVisualElement>(this TVisualElement t, String tooltip) where TVisualElement : VisualElement
        {
            t.tooltip = tooltip;

            return t;
        }

        public static TVisualElement BindTooltip<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.tooltip, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }
    }
}
