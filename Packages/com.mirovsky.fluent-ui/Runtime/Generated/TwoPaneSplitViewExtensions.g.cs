// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine.UIElements;
    
    public static class FluentUITwoPaneSplitViewExtensions
    {
        public static TVisualElement CollapseChild<TVisualElement>(this TVisualElement t, Int32 index) where TVisualElement : TwoPaneSplitView
        {
            t.CollapseChild(index);
            
            return t;
        }
        
        public static TVisualElement UnCollapse<TVisualElement>(this TVisualElement t) where TVisualElement : TwoPaneSplitView
        {
            t.UnCollapse();
            
            return t;
        }
        
        public static TVisualElement FixedPaneIndex<TVisualElement>(this TVisualElement t, Int32 fixedPaneIndex) where TVisualElement : TwoPaneSplitView
        {
            t.fixedPaneIndex = fixedPaneIndex;
            
            return t;
        }
        
        public static TVisualElement BindFixedPaneIndex<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TwoPaneSplitView
        {
            t.SetBinding(Properties.fixedPaneIndex, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement FixedPaneInitialDimension<TVisualElement>(this TVisualElement t, Single fixedPaneInitialDimension) where TVisualElement : TwoPaneSplitView
        {
            t.fixedPaneInitialDimension = fixedPaneInitialDimension;
            
            return t;
        }
        
        public static TVisualElement BindFixedPaneInitialDimension<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TwoPaneSplitView
        {
            t.SetBinding(Properties.fixedPaneInitialDimension, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Orientation<TVisualElement>(this TVisualElement t, TwoPaneSplitViewOrientation orientation) where TVisualElement : TwoPaneSplitView
        {
            t.orientation = orientation;
            
            return t;
        }
        
        public static TVisualElement BindOrientation<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TwoPaneSplitView
        {
            t.SetBinding(Properties.orientation, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
