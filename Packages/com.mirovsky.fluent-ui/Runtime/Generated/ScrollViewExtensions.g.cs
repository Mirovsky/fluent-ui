// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine;
    using UnityEngine.UIElements;
    
    public static class FluentUIScrollViewExtensions
    {
        public static TVisualElement ScrollTo<TVisualElement>(this TVisualElement t, VisualElement child) where TVisualElement : ScrollView
        {
            t.ScrollTo(child);
            
            return t;
        }
        
        public static TVisualElement HorizontalScrollerVisibility<TVisualElement>(this TVisualElement t, ScrollerVisibility horizontalScrollerVisibility) where TVisualElement : ScrollView
        {
            t.horizontalScrollerVisibility = horizontalScrollerVisibility;
            
            return t;
        }
        
        public static TVisualElement BindHorizontalScrollerVisibility<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.horizontalScrollerVisibility, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement VerticalScrollerVisibility<TVisualElement>(this TVisualElement t, ScrollerVisibility verticalScrollerVisibility) where TVisualElement : ScrollView
        {
            t.verticalScrollerVisibility = verticalScrollerVisibility;
            
            return t;
        }
        
        public static TVisualElement BindVerticalScrollerVisibility<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.verticalScrollerVisibility, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ElasticAnimationIntervalMs<TVisualElement>(this TVisualElement t, Int64 elasticAnimationIntervalMs) where TVisualElement : ScrollView
        {
            t.elasticAnimationIntervalMs = elasticAnimationIntervalMs;
            
            return t;
        }
        
        public static TVisualElement BindElasticAnimationIntervalMs<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.elasticAnimationIntervalMs, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ScrollOffset<TVisualElement>(this TVisualElement t, Vector2 scrollOffset) where TVisualElement : ScrollView
        {
            t.scrollOffset = scrollOffset;
            
            return t;
        }
        
        public static TVisualElement BindScrollOffset<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.scrollOffset, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement HorizontalPageSize<TVisualElement>(this TVisualElement t, Single horizontalPageSize) where TVisualElement : ScrollView
        {
            t.horizontalPageSize = horizontalPageSize;
            
            return t;
        }
        
        public static TVisualElement BindHorizontalPageSize<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.horizontalPageSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement VerticalPageSize<TVisualElement>(this TVisualElement t, Single verticalPageSize) where TVisualElement : ScrollView
        {
            t.verticalPageSize = verticalPageSize;
            
            return t;
        }
        
        public static TVisualElement BindVerticalPageSize<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.verticalPageSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement MouseWheelScrollSize<TVisualElement>(this TVisualElement t, Single mouseWheelScrollSize) where TVisualElement : ScrollView
        {
            t.mouseWheelScrollSize = mouseWheelScrollSize;
            
            return t;
        }
        
        public static TVisualElement BindMouseWheelScrollSize<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.mouseWheelScrollSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ScrollDecelerationRate<TVisualElement>(this TVisualElement t, Single scrollDecelerationRate) where TVisualElement : ScrollView
        {
            t.scrollDecelerationRate = scrollDecelerationRate;
            
            return t;
        }
        
        public static TVisualElement BindScrollDecelerationRate<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.scrollDecelerationRate, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Elasticity<TVisualElement>(this TVisualElement t, Single elasticity) where TVisualElement : ScrollView
        {
            t.elasticity = elasticity;
            
            return t;
        }
        
        public static TVisualElement BindElasticity<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.elasticity, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement TouchScrollBehavior<TVisualElement>(this TVisualElement t, ScrollView.TouchScrollBehavior touchScrollBehavior) where TVisualElement : ScrollView
        {
            t.touchScrollBehavior = touchScrollBehavior;
            
            return t;
        }
        
        public static TVisualElement BindTouchScrollBehavior<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.touchScrollBehavior, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement NestedInteractionKind<TVisualElement>(this TVisualElement t, ScrollView.NestedInteractionKind nestedInteractionKind) where TVisualElement : ScrollView
        {
            t.nestedInteractionKind = nestedInteractionKind;
            
            return t;
        }
        
        public static TVisualElement BindNestedInteractionKind<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.nestedInteractionKind, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Mode<TVisualElement>(this TVisualElement t, ScrollViewMode mode) where TVisualElement : ScrollView
        {
            t.mode = mode;
            
            return t;
        }
        
        public static TVisualElement BindMode<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : ScrollView
        {
            t.SetBinding(Properties.mode, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
