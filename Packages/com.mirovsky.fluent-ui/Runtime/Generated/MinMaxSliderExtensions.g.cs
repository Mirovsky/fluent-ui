// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine;
    using UnityEngine.UIElements;
    
    public static class FluentUIMinMaxSliderExtensions
    {
        public static TVisualElement ValueWithoutNotify<TVisualElement>(this TVisualElement t, Vector2 newValue) where TVisualElement : MinMaxSlider
        {
            t.SetValueWithoutNotify(newValue);
            
            return t;
        }
        
        public static TVisualElement MinValue<TVisualElement>(this TVisualElement t, Single minValue) where TVisualElement : MinMaxSlider
        {
            t.minValue = minValue;
            
            return t;
        }
        
        public static TVisualElement BindMinValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : MinMaxSlider
        {
            t.SetBinding(Properties.minValue, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement MaxValue<TVisualElement>(this TVisualElement t, Single maxValue) where TVisualElement : MinMaxSlider
        {
            t.maxValue = maxValue;
            
            return t;
        }
        
        public static TVisualElement BindMaxValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : MinMaxSlider
        {
            t.SetBinding(Properties.maxValue, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Value<TVisualElement>(this TVisualElement t, Vector2 value) where TVisualElement : MinMaxSlider
        {
            t.value = value;
            
            return t;
        }
        
        public static TVisualElement BindValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : MinMaxSlider
        {
            t.SetBinding(Properties.value, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement LowLimit<TVisualElement>(this TVisualElement t, Single lowLimit) where TVisualElement : MinMaxSlider
        {
            t.lowLimit = lowLimit;
            
            return t;
        }
        
        public static TVisualElement BindLowLimit<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : MinMaxSlider
        {
            t.SetBinding(Properties.lowLimit, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement HighLimit<TVisualElement>(this TVisualElement t, Single highLimit) where TVisualElement : MinMaxSlider
        {
            t.highLimit = highLimit;
            
            return t;
        }
        
        public static TVisualElement BindHighLimit<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : MinMaxSlider
        {
            t.SetBinding(Properties.highLimit, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
