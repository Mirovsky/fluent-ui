// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine;
    using UnityEngine.UIElements;
    
    public static class FluentUIStyleVisualElementExtensions
    {
        
        public static TVisualElement StyleAlignContent<TVisualElement>(this TVisualElement t, StyleEnum<Align> alignContent) where TVisualElement : VisualElement
        {
            t.style.alignContent = alignContent;
            
            return t;
        }
        
        public static TVisualElement BindStyleAlignContent<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleAlignContent, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleAlignItems<TVisualElement>(this TVisualElement t, StyleEnum<Align> alignItems) where TVisualElement : VisualElement
        {
            t.style.alignItems = alignItems;
            
            return t;
        }
        
        public static TVisualElement BindStyleAlignItems<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleAlignItems, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleAlignSelf<TVisualElement>(this TVisualElement t, StyleEnum<Align> alignSelf) where TVisualElement : VisualElement
        {
            t.style.alignSelf = alignSelf;
            
            return t;
        }
        
        public static TVisualElement BindStyleAlignSelf<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleAlignSelf, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundColor<TVisualElement>(this TVisualElement t, StyleColor backgroundColor) where TVisualElement : VisualElement
        {
            t.style.backgroundColor = backgroundColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundImage<TVisualElement>(this TVisualElement t, StyleBackground backgroundImage) where TVisualElement : VisualElement
        {
            t.style.backgroundImage = backgroundImage;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundImage<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundImage, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundPositionX<TVisualElement>(this TVisualElement t, StyleBackgroundPosition backgroundPositionX) where TVisualElement : VisualElement
        {
            t.style.backgroundPositionX = backgroundPositionX;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundPositionX<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundPositionX, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundPositionY<TVisualElement>(this TVisualElement t, StyleBackgroundPosition backgroundPositionY) where TVisualElement : VisualElement
        {
            t.style.backgroundPositionY = backgroundPositionY;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundPositionY<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundPositionY, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundRepeat<TVisualElement>(this TVisualElement t, StyleBackgroundRepeat backgroundRepeat) where TVisualElement : VisualElement
        {
            t.style.backgroundRepeat = backgroundRepeat;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundRepeat<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundRepeat, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBackgroundSize<TVisualElement>(this TVisualElement t, StyleBackgroundSize backgroundSize) where TVisualElement : VisualElement
        {
            t.style.backgroundSize = backgroundSize;
            
            return t;
        }
        
        public static TVisualElement BindStyleBackgroundSize<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBackgroundSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderBottomColor<TVisualElement>(this TVisualElement t, StyleColor borderBottomColor) where TVisualElement : VisualElement
        {
            t.style.borderBottomColor = borderBottomColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderBottomColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderBottomColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderBottomLeftRadius<TVisualElement>(this TVisualElement t, StyleLength borderBottomLeftRadius) where TVisualElement : VisualElement
        {
            t.style.borderBottomLeftRadius = borderBottomLeftRadius;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderBottomLeftRadius<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderBottomLeftRadius, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderBottomRightRadius<TVisualElement>(this TVisualElement t, StyleLength borderBottomRightRadius) where TVisualElement : VisualElement
        {
            t.style.borderBottomRightRadius = borderBottomRightRadius;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderBottomRightRadius<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderBottomRightRadius, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderBottomWidth<TVisualElement>(this TVisualElement t, StyleFloat borderBottomWidth) where TVisualElement : VisualElement
        {
            t.style.borderBottomWidth = borderBottomWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderBottomWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderBottomWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderLeftColor<TVisualElement>(this TVisualElement t, StyleColor borderLeftColor) where TVisualElement : VisualElement
        {
            t.style.borderLeftColor = borderLeftColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderLeftColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderLeftColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderLeftWidth<TVisualElement>(this TVisualElement t, StyleFloat borderLeftWidth) where TVisualElement : VisualElement
        {
            t.style.borderLeftWidth = borderLeftWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderLeftWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderLeftWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderRightColor<TVisualElement>(this TVisualElement t, StyleColor borderRightColor) where TVisualElement : VisualElement
        {
            t.style.borderRightColor = borderRightColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderRightColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderRightColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderRightWidth<TVisualElement>(this TVisualElement t, StyleFloat borderRightWidth) where TVisualElement : VisualElement
        {
            t.style.borderRightWidth = borderRightWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderRightWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderRightWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderTopColor<TVisualElement>(this TVisualElement t, StyleColor borderTopColor) where TVisualElement : VisualElement
        {
            t.style.borderTopColor = borderTopColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderTopColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderTopColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderTopLeftRadius<TVisualElement>(this TVisualElement t, StyleLength borderTopLeftRadius) where TVisualElement : VisualElement
        {
            t.style.borderTopLeftRadius = borderTopLeftRadius;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderTopLeftRadius<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderTopLeftRadius, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderTopRightRadius<TVisualElement>(this TVisualElement t, StyleLength borderTopRightRadius) where TVisualElement : VisualElement
        {
            t.style.borderTopRightRadius = borderTopRightRadius;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderTopRightRadius<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderTopRightRadius, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBorderTopWidth<TVisualElement>(this TVisualElement t, StyleFloat borderTopWidth) where TVisualElement : VisualElement
        {
            t.style.borderTopWidth = borderTopWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleBorderTopWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBorderTopWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleBottom<TVisualElement>(this TVisualElement t, StyleLength bottom) where TVisualElement : VisualElement
        {
            t.style.bottom = bottom;
            
            return t;
        }
        
        public static TVisualElement BindStyleBottom<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleBottom, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleColor<TVisualElement>(this TVisualElement t, StyleColor color) where TVisualElement : VisualElement
        {
            t.style.color = color;
            
            return t;
        }
        
        public static TVisualElement BindStyleColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleCursor<TVisualElement>(this TVisualElement t, StyleCursor cursor) where TVisualElement : VisualElement
        {
            t.style.cursor = cursor;
            
            return t;
        }
        
        public static TVisualElement BindStyleCursor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleCursor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleDisplay<TVisualElement>(this TVisualElement t, StyleEnum<DisplayStyle> display) where TVisualElement : VisualElement
        {
            t.style.display = display;
            
            return t;
        }
        
        public static TVisualElement BindStyleDisplay<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleDisplay, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFlexBasis<TVisualElement>(this TVisualElement t, StyleLength flexBasis) where TVisualElement : VisualElement
        {
            t.style.flexBasis = flexBasis;
            
            return t;
        }
        
        public static TVisualElement BindStyleFlexBasis<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFlexBasis, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFlexDirection<TVisualElement>(this TVisualElement t, StyleEnum<FlexDirection> flexDirection) where TVisualElement : VisualElement
        {
            t.style.flexDirection = flexDirection;
            
            return t;
        }
        
        public static TVisualElement BindStyleFlexDirection<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFlexDirection, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFlexGrow<TVisualElement>(this TVisualElement t, StyleFloat flexGrow) where TVisualElement : VisualElement
        {
            t.style.flexGrow = flexGrow;
            
            return t;
        }
        
        public static TVisualElement BindStyleFlexGrow<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFlexGrow, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFlexShrink<TVisualElement>(this TVisualElement t, StyleFloat flexShrink) where TVisualElement : VisualElement
        {
            t.style.flexShrink = flexShrink;
            
            return t;
        }
        
        public static TVisualElement BindStyleFlexShrink<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFlexShrink, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFlexWrap<TVisualElement>(this TVisualElement t, StyleEnum<Wrap> flexWrap) where TVisualElement : VisualElement
        {
            t.style.flexWrap = flexWrap;
            
            return t;
        }
        
        public static TVisualElement BindStyleFlexWrap<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFlexWrap, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleFontSize<TVisualElement>(this TVisualElement t, StyleLength fontSize) where TVisualElement : VisualElement
        {
            t.style.fontSize = fontSize;
            
            return t;
        }
        
        public static TVisualElement BindStyleFontSize<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleFontSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleHeight<TVisualElement>(this TVisualElement t, StyleLength height) where TVisualElement : VisualElement
        {
            t.style.height = height;
            
            return t;
        }
        
        public static TVisualElement BindStyleHeight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleHeight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleJustifyContent<TVisualElement>(this TVisualElement t, StyleEnum<Justify> justifyContent) where TVisualElement : VisualElement
        {
            t.style.justifyContent = justifyContent;
            
            return t;
        }
        
        public static TVisualElement BindStyleJustifyContent<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleJustifyContent, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleLeft<TVisualElement>(this TVisualElement t, StyleLength left) where TVisualElement : VisualElement
        {
            t.style.left = left;
            
            return t;
        }
        
        public static TVisualElement BindStyleLeft<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleLeft, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleLetterSpacing<TVisualElement>(this TVisualElement t, StyleLength letterSpacing) where TVisualElement : VisualElement
        {
            t.style.letterSpacing = letterSpacing;
            
            return t;
        }
        
        public static TVisualElement BindStyleLetterSpacing<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleLetterSpacing, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMarginBottom<TVisualElement>(this TVisualElement t, StyleLength marginBottom) where TVisualElement : VisualElement
        {
            t.style.marginBottom = marginBottom;
            
            return t;
        }
        
        public static TVisualElement BindStyleMarginBottom<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMarginBottom, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMarginLeft<TVisualElement>(this TVisualElement t, StyleLength marginLeft) where TVisualElement : VisualElement
        {
            t.style.marginLeft = marginLeft;
            
            return t;
        }
        
        public static TVisualElement BindStyleMarginLeft<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMarginLeft, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMarginRight<TVisualElement>(this TVisualElement t, StyleLength marginRight) where TVisualElement : VisualElement
        {
            t.style.marginRight = marginRight;
            
            return t;
        }
        
        public static TVisualElement BindStyleMarginRight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMarginRight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMarginTop<TVisualElement>(this TVisualElement t, StyleLength marginTop) where TVisualElement : VisualElement
        {
            t.style.marginTop = marginTop;
            
            return t;
        }
        
        public static TVisualElement BindStyleMarginTop<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMarginTop, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMaxHeight<TVisualElement>(this TVisualElement t, StyleLength maxHeight) where TVisualElement : VisualElement
        {
            t.style.maxHeight = maxHeight;
            
            return t;
        }
        
        public static TVisualElement BindStyleMaxHeight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMaxHeight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMaxWidth<TVisualElement>(this TVisualElement t, StyleLength maxWidth) where TVisualElement : VisualElement
        {
            t.style.maxWidth = maxWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleMaxWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMaxWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMinHeight<TVisualElement>(this TVisualElement t, StyleLength minHeight) where TVisualElement : VisualElement
        {
            t.style.minHeight = minHeight;
            
            return t;
        }
        
        public static TVisualElement BindStyleMinHeight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMinHeight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleMinWidth<TVisualElement>(this TVisualElement t, StyleLength minWidth) where TVisualElement : VisualElement
        {
            t.style.minWidth = minWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleMinWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleMinWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleOpacity<TVisualElement>(this TVisualElement t, StyleFloat opacity) where TVisualElement : VisualElement
        {
            t.style.opacity = opacity;
            
            return t;
        }
        
        public static TVisualElement BindStyleOpacity<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleOpacity, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleOverflow<TVisualElement>(this TVisualElement t, StyleEnum<Overflow> overflow) where TVisualElement : VisualElement
        {
            t.style.overflow = overflow;
            
            return t;
        }
        
        public static TVisualElement BindStyleOverflow<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleOverflow, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StylePaddingBottom<TVisualElement>(this TVisualElement t, StyleLength paddingBottom) where TVisualElement : VisualElement
        {
            t.style.paddingBottom = paddingBottom;
            
            return t;
        }
        
        public static TVisualElement BindStylePaddingBottom<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.stylePaddingBottom, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StylePaddingLeft<TVisualElement>(this TVisualElement t, StyleLength paddingLeft) where TVisualElement : VisualElement
        {
            t.style.paddingLeft = paddingLeft;
            
            return t;
        }
        
        public static TVisualElement BindStylePaddingLeft<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.stylePaddingLeft, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StylePaddingRight<TVisualElement>(this TVisualElement t, StyleLength paddingRight) where TVisualElement : VisualElement
        {
            t.style.paddingRight = paddingRight;
            
            return t;
        }
        
        public static TVisualElement BindStylePaddingRight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.stylePaddingRight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StylePaddingTop<TVisualElement>(this TVisualElement t, StyleLength paddingTop) where TVisualElement : VisualElement
        {
            t.style.paddingTop = paddingTop;
            
            return t;
        }
        
        public static TVisualElement BindStylePaddingTop<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.stylePaddingTop, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StylePosition<TVisualElement>(this TVisualElement t, StyleEnum<Position> position) where TVisualElement : VisualElement
        {
            t.style.position = position;
            
            return t;
        }
        
        public static TVisualElement BindStylePosition<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.stylePosition, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleRight<TVisualElement>(this TVisualElement t, StyleLength right) where TVisualElement : VisualElement
        {
            t.style.right = right;
            
            return t;
        }
        
        public static TVisualElement BindStyleRight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleRight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleRotate<TVisualElement>(this TVisualElement t, StyleRotate rotate) where TVisualElement : VisualElement
        {
            t.style.rotate = rotate;
            
            return t;
        }
        
        public static TVisualElement BindStyleRotate<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleRotate, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleScale<TVisualElement>(this TVisualElement t, StyleScale scale) where TVisualElement : VisualElement
        {
            t.style.scale = scale;
            
            return t;
        }
        
        public static TVisualElement BindStyleScale<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleScale, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTextOverflow<TVisualElement>(this TVisualElement t, StyleEnum<TextOverflow> textOverflow) where TVisualElement : VisualElement
        {
            t.style.textOverflow = textOverflow;
            
            return t;
        }
        
        public static TVisualElement BindStyleTextOverflow<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTextOverflow, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTextShadow<TVisualElement>(this TVisualElement t, StyleTextShadow textShadow) where TVisualElement : VisualElement
        {
            t.style.textShadow = textShadow;
            
            return t;
        }
        
        public static TVisualElement BindStyleTextShadow<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTextShadow, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTop<TVisualElement>(this TVisualElement t, StyleLength top) where TVisualElement : VisualElement
        {
            t.style.top = top;
            
            return t;
        }
        
        public static TVisualElement BindStyleTop<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTop, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTransformOrigin<TVisualElement>(this TVisualElement t, StyleTransformOrigin transformOrigin) where TVisualElement : VisualElement
        {
            t.style.transformOrigin = transformOrigin;
            
            return t;
        }
        
        public static TVisualElement BindStyleTransformOrigin<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTransformOrigin, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTransitionDelay<TVisualElement>(this TVisualElement t, StyleList<TimeValue> transitionDelay) where TVisualElement : VisualElement
        {
            t.style.transitionDelay = transitionDelay;
            
            return t;
        }
        
        public static TVisualElement BindStyleTransitionDelay<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTransitionDelay, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTransitionDuration<TVisualElement>(this TVisualElement t, StyleList<TimeValue> transitionDuration) where TVisualElement : VisualElement
        {
            t.style.transitionDuration = transitionDuration;
            
            return t;
        }
        
        public static TVisualElement BindStyleTransitionDuration<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTransitionDuration, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTransitionProperty<TVisualElement>(this TVisualElement t, StyleList<StylePropertyName> transitionProperty) where TVisualElement : VisualElement
        {
            t.style.transitionProperty = transitionProperty;
            
            return t;
        }
        
        public static TVisualElement BindStyleTransitionProperty<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTransition, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTransitionTimingFunction<TVisualElement>(this TVisualElement t, StyleList<EasingFunction> transitionTimingFunction) where TVisualElement : VisualElement
        {
            t.style.transitionTimingFunction = transitionTimingFunction;
            
            return t;
        }
        
        public static TVisualElement BindStyleTransitionTimingFunction<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTransitionTimingFunction, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleTranslate<TVisualElement>(this TVisualElement t, StyleTranslate translate) where TVisualElement : VisualElement
        {
            t.style.translate = translate;
            
            return t;
        }
        
        public static TVisualElement BindStyleTranslate<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleTranslate, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityBackgroundImageTintColor<TVisualElement>(this TVisualElement t, StyleColor unityBackgroundImageTintColor) where TVisualElement : VisualElement
        {
            t.style.unityBackgroundImageTintColor = unityBackgroundImageTintColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityBackgroundImageTintColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityBackgroundImageTintColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityEditorTextRenderingMode<TVisualElement>(this TVisualElement t, StyleEnum<EditorTextRenderingMode> unityEditorTextRenderingMode) where TVisualElement : VisualElement
        {
            t.style.unityEditorTextRenderingMode = unityEditorTextRenderingMode;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityEditorTextRenderingMode<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityEditorTextRenderingMode, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityFont<TVisualElement>(this TVisualElement t, StyleFont unityFont) where TVisualElement : VisualElement
        {
            t.style.unityFont = unityFont;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityFont<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityFont, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityFontDefinition<TVisualElement>(this TVisualElement t, StyleFontDefinition unityFontDefinition) where TVisualElement : VisualElement
        {
            t.style.unityFontDefinition = unityFontDefinition;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityFontDefinition<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityFontDefinition, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityFontStyleAndWeight<TVisualElement>(this TVisualElement t, StyleEnum<FontStyle> unityFontStyleAndWeight) where TVisualElement : VisualElement
        {
            t.style.unityFontStyleAndWeight = unityFontStyleAndWeight;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityFontStyleAndWeight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityFontStyleAndWeight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityOverflowClipBox<TVisualElement>(this TVisualElement t, StyleEnum<OverflowClipBox> unityOverflowClipBox) where TVisualElement : VisualElement
        {
            t.style.unityOverflowClipBox = unityOverflowClipBox;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityOverflowClipBox<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityOverflowClipBox, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityParagraphSpacing<TVisualElement>(this TVisualElement t, StyleLength unityParagraphSpacing) where TVisualElement : VisualElement
        {
            t.style.unityParagraphSpacing = unityParagraphSpacing;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityParagraphSpacing<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityParagraphSpacing, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceBottom<TVisualElement>(this TVisualElement t, StyleInt unitySliceBottom) where TVisualElement : VisualElement
        {
            t.style.unitySliceBottom = unitySliceBottom;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceBottom<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceBottom, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceLeft<TVisualElement>(this TVisualElement t, StyleInt unitySliceLeft) where TVisualElement : VisualElement
        {
            t.style.unitySliceLeft = unitySliceLeft;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceLeft<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceLeft, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceRight<TVisualElement>(this TVisualElement t, StyleInt unitySliceRight) where TVisualElement : VisualElement
        {
            t.style.unitySliceRight = unitySliceRight;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceRight<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceRight, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceScale<TVisualElement>(this TVisualElement t, StyleFloat unitySliceScale) where TVisualElement : VisualElement
        {
            t.style.unitySliceScale = unitySliceScale;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceScale<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceScale, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceTop<TVisualElement>(this TVisualElement t, StyleInt unitySliceTop) where TVisualElement : VisualElement
        {
            t.style.unitySliceTop = unitySliceTop;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceTop<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceTop, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnitySliceType<TVisualElement>(this TVisualElement t, StyleEnum<SliceType> unitySliceType) where TVisualElement : VisualElement
        {
            t.style.unitySliceType = unitySliceType;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnitySliceType<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnitySliceType, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityTextAlign<TVisualElement>(this TVisualElement t, StyleEnum<TextAnchor> unityTextAlign) where TVisualElement : VisualElement
        {
            t.style.unityTextAlign = unityTextAlign;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityTextAlign<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityTextAlign, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityTextGenerator<TVisualElement>(this TVisualElement t, StyleEnum<TextGeneratorType> unityTextGenerator) where TVisualElement : VisualElement
        {
            t.style.unityTextGenerator = unityTextGenerator;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityTextGenerator<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityTextGenerator, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityTextOutlineColor<TVisualElement>(this TVisualElement t, StyleColor unityTextOutlineColor) where TVisualElement : VisualElement
        {
            t.style.unityTextOutlineColor = unityTextOutlineColor;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityTextOutlineColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityTextOutlineColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityTextOutlineWidth<TVisualElement>(this TVisualElement t, StyleFloat unityTextOutlineWidth) where TVisualElement : VisualElement
        {
            t.style.unityTextOutlineWidth = unityTextOutlineWidth;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityTextOutlineWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityTextOutlineWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleUnityTextOverflowPosition<TVisualElement>(this TVisualElement t, StyleEnum<TextOverflowPosition> unityTextOverflowPosition) where TVisualElement : VisualElement
        {
            t.style.unityTextOverflowPosition = unityTextOverflowPosition;
            
            return t;
        }
        
        public static TVisualElement BindStyleUnityTextOverflowPosition<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleUnityTextOverflowPosition, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleVisibility<TVisualElement>(this TVisualElement t, StyleEnum<Visibility> visibility) where TVisualElement : VisualElement
        {
            t.style.visibility = visibility;
            
            return t;
        }
        
        public static TVisualElement BindStyleVisibility<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleVisibility, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleWhiteSpace<TVisualElement>(this TVisualElement t, StyleEnum<WhiteSpace> whiteSpace) where TVisualElement : VisualElement
        {
            t.style.whiteSpace = whiteSpace;
            
            return t;
        }
        
        public static TVisualElement BindStyleWhiteSpace<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleWhiteSpace, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleWidth<TVisualElement>(this TVisualElement t, StyleLength width) where TVisualElement : VisualElement
        {
            t.style.width = width;
            
            return t;
        }
        
        public static TVisualElement BindStyleWidth<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleWidth, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement StyleWordSpacing<TVisualElement>(this TVisualElement t, StyleLength wordSpacing) where TVisualElement : VisualElement
        {
            t.style.wordSpacing = wordSpacing;
            
            return t;
        }
        
        public static TVisualElement BindStyleWordSpacing<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : VisualElement
        {
            t.SetBinding(Properties.styleWordSpacing, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
