// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine;
    using UnityEngine.UIElements;

    public static class FluentUITextInputBaseFieldExtensions
    {
        public static TVisualElement SelectAll<TVisualElement, TValueType>(this TVisualElement t) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SelectAll();

            return t;
        }

        public static TVisualElement SelectNone<TVisualElement, TValueType>(this TVisualElement t) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SelectNone();

            return t;
        }

        public static TVisualElement SelectRange<TVisualElement, TValueType>(this TVisualElement t, Int32 cursorIndex, Int32 selectionIndex) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SelectRange(cursorIndex, selectionIndex);

            return t;
        }

        public static TVisualElement IsReadOnly<TVisualElement, TValueType>(this TVisualElement t, Boolean isReadOnly) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.isReadOnly = isReadOnly;

            return t;
        }

        public static TVisualElement BindIsReadOnly<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.isReadOnly, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement IsPasswordField<TVisualElement, TValueType>(this TVisualElement t, Boolean isPasswordField) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.isPasswordField = isPasswordField;

            return t;
        }

        public static TVisualElement BindIsPasswordField<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.isPasswordField, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement AutoCorrection<TVisualElement, TValueType>(this TVisualElement t, Boolean autoCorrection) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.autoCorrection = autoCorrection;

            return t;
        }

        public static TVisualElement BindAutoCorrection<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.autoCorrection, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement HideMobileInput<TVisualElement, TValueType>(this TVisualElement t, Boolean hideMobileInput) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.hideMobileInput = hideMobileInput;

            return t;
        }

        public static TVisualElement BindHideMobileInput<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.hideMobileInput, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement KeyboardType<TVisualElement, TValueType>(this TVisualElement t, TouchScreenKeyboardType keyboardType) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.keyboardType = keyboardType;

            return t;
        }

        public static TVisualElement BindKeyboardType<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.keyboardType, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement MaxLength<TVisualElement, TValueType>(this TVisualElement t, Int32 maxLength) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.maxLength = maxLength;

            return t;
        }

        public static TVisualElement BindMaxLength<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.maxLength, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement IsDelayed<TVisualElement, TValueType>(this TVisualElement t, Boolean isDelayed) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.isDelayed = isDelayed;

            return t;
        }

        public static TVisualElement BindIsDelayed<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.isDelayed, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement MaskChar<TVisualElement, TValueType>(this TVisualElement t, Char maskChar) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.maskChar = maskChar;

            return t;
        }

        public static TVisualElement BindMaskChar<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.maskChar, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement CursorIndex<TVisualElement, TValueType>(this TVisualElement t, Int32 cursorIndex) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.cursorIndex = cursorIndex;

            return t;
        }

        public static TVisualElement BindCursorIndex<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.cursorIndex, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement SelectIndex<TVisualElement, TValueType>(this TVisualElement t, Int32 selectIndex) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.selectIndex = selectIndex;

            return t;
        }

        public static TVisualElement BindSelectIndex<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.selectIndex, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement SelectAllOnFocus<TVisualElement, TValueType>(this TVisualElement t, Boolean selectAllOnFocus) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.selectAllOnFocus = selectAllOnFocus;

            return t;
        }

        public static TVisualElement BindSelectAllOnFocus<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.selectAllOnFocus, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement SelectAllOnMouseUp<TVisualElement, TValueType>(this TVisualElement t, Boolean selectAllOnMouseUp) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.selectAllOnMouseUp = selectAllOnMouseUp;

            return t;
        }

        public static TVisualElement BindSelectAllOnMouseUp<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.selectAllOnMouseUp, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement DoubleClickSelectsWord<TVisualElement, TValueType>(this TVisualElement t, Boolean doubleClickSelectsWord) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.doubleClickSelectsWord = doubleClickSelectsWord;

            return t;
        }

        public static TVisualElement BindDoubleClickSelectsWord<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.doubleClickSelectsWord, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement TripleClickSelectsLine<TVisualElement, TValueType>(this TVisualElement t, Boolean tripleClickSelectsLine) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.tripleClickSelectsLine = tripleClickSelectsLine;

            return t;
        }

        public static TVisualElement BindTripleClickSelectsLine<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.tripleClickSelectsLine, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement EmojiFallbackSupport<TVisualElement, TValueType>(this TVisualElement t, Boolean emojiFallbackSupport) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.emojiFallbackSupport = emojiFallbackSupport;

            return t;
        }

        public static TVisualElement BindEmojiFallbackSupport<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.emojiFallbackSupport, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement VerticalScrollerVisibility<TVisualElement, TValueType>(this TVisualElement t, ScrollerVisibility verticalScrollerVisibility) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.verticalScrollerVisibility = verticalScrollerVisibility;

            return t;
        }

        public static TVisualElement BindVerticalScrollerVisibility<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextInputBaseField<TValueType>
        {
            t.SetBinding(Properties.verticalScrollerVisibility, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }
    }
}
