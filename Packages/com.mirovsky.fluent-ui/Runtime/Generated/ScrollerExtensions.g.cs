// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine.UIElements;
    
    public static class FluentUIScrollerExtensions
    {
        public static TVisualElement Adjust<TVisualElement>(this TVisualElement t, Single factor) where TVisualElement : Scroller
        {
            t.Adjust(factor);
            
            return t;
        }
        
        public static TVisualElement ScrollPageUp<TVisualElement>(this TVisualElement t) where TVisualElement : Scroller
        {
            t.ScrollPageUp();
            
            return t;
        }
        
        public static TVisualElement ScrollPageDown<TVisualElement>(this TVisualElement t) where TVisualElement : Scroller
        {
            t.ScrollPageDown();
            
            return t;
        }
        
        public static TVisualElement ScrollPageUp<TVisualElement>(this TVisualElement t, Single factor) where TVisualElement : Scroller
        {
            t.ScrollPageUp(factor);
            
            return t;
        }
        
        public static TVisualElement ScrollPageDown<TVisualElement>(this TVisualElement t, Single factor) where TVisualElement : Scroller
        {
            t.ScrollPageDown(factor);
            
            return t;
        }
        
        public static TVisualElement Value<TVisualElement>(this TVisualElement t, Single value) where TVisualElement : Scroller
        {
            t.value = value;
            
            return t;
        }
        
        public static TVisualElement BindValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Scroller
        {
            t.SetBinding(Properties.value, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement LowValue<TVisualElement>(this TVisualElement t, Single lowValue) where TVisualElement : Scroller
        {
            t.lowValue = lowValue;
            
            return t;
        }
        
        public static TVisualElement BindLowValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Scroller
        {
            t.SetBinding(Properties.lowValue, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement HighValue<TVisualElement>(this TVisualElement t, Single highValue) where TVisualElement : Scroller
        {
            t.highValue = highValue;
            
            return t;
        }
        
        public static TVisualElement BindHighValue<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Scroller
        {
            t.SetBinding(Properties.highValue, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Direction<TVisualElement>(this TVisualElement t, SliderDirection direction) where TVisualElement : Scroller
        {
            t.direction = direction;
            
            return t;
        }
        
        public static TVisualElement BindDirection<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Scroller
        {
            t.SetBinding(Properties.direction, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ValueChanged<TVisualElement>(this TVisualElement t, Action<Single> valueChanged) where TVisualElement : Scroller
        {
            t.valueChanged += valueChanged;
            
            return t;
        }
    }
}
