// <auto-generated/>

namespace FluentUI
{
    using System;
    using System.Collections.Generic;
    using UnityEngine.UIElements;

    public static class FluentUIBaseTreeViewExtensions
    {
        public static TVisualElement RootItems<TVisualElement, T>(this TVisualElement t, IList<TreeViewItemData<T>> rootItems) where TVisualElement : BaseTreeView
        {
            t.SetRootItems(rootItems);

            return t;
        }

        public static TVisualElement ViewController<TVisualElement>(this TVisualElement t, CollectionViewController controller) where TVisualElement : BaseTreeView
        {
            t.SetViewController(controller);

            return t;
        }

        public static TVisualElement AddItem<TVisualElement, T>(this TVisualElement t, TreeViewItemData<T> item, Int32 parentId, Int32 childIndex, Boolean rebuildTree) where TVisualElement : BaseTreeView
        {
            t.AddItem(item, parentId, childIndex, rebuildTree);

            return t;
        }

        public static TVisualElement SelectionById<TVisualElement>(this TVisualElement t, Int32 id) where TVisualElement : BaseTreeView
        {
            t.SetSelectionById(id);

            return t;
        }

        public static TVisualElement SelectionById<TVisualElement>(this TVisualElement t, IEnumerable<Int32> ids) where TVisualElement : BaseTreeView
        {
            t.SetSelectionById(ids);

            return t;
        }

        public static TVisualElement SelectionByIdWithoutNotify<TVisualElement>(this TVisualElement t, IEnumerable<Int32> ids) where TVisualElement : BaseTreeView
        {
            t.SetSelectionByIdWithoutNotify(ids);

            return t;
        }

        public static TVisualElement AddToSelectionById<TVisualElement>(this TVisualElement t, Int32 id) where TVisualElement : BaseTreeView
        {
            t.AddToSelectionById(id);

            return t;
        }

        public static TVisualElement RemoveFromSelectionById<TVisualElement>(this TVisualElement t, Int32 id) where TVisualElement : BaseTreeView
        {
            t.RemoveFromSelectionById(id);

            return t;
        }

        public static TVisualElement CollapseItem<TVisualElement>(this TVisualElement t, Int32 id, Boolean collapseAllChildren, Boolean refresh) where TVisualElement : BaseTreeView
        {
            t.CollapseItem(id, collapseAllChildren, refresh);

            return t;
        }

        public static TVisualElement ExpandItem<TVisualElement>(this TVisualElement t, Int32 id, Boolean expandAllChildren, Boolean refresh) where TVisualElement : BaseTreeView
        {
            t.ExpandItem(id, expandAllChildren, refresh);

            return t;
        }

        public static TVisualElement ExpandRootItems<TVisualElement>(this TVisualElement t) where TVisualElement : BaseTreeView
        {
            t.ExpandRootItems();

            return t;
        }

        public static TVisualElement ExpandAll<TVisualElement>(this TVisualElement t) where TVisualElement : BaseTreeView
        {
            t.ExpandAll();

            return t;
        }

        public static TVisualElement CollapseAll<TVisualElement>(this TVisualElement t) where TVisualElement : BaseTreeView
        {
            t.CollapseAll();

            return t;
        }

        public static TVisualElement AutoExpand<TVisualElement>(this TVisualElement t, Boolean autoExpand) where TVisualElement : BaseTreeView
        {
            t.autoExpand = autoExpand;

            return t;
        }

        public static TVisualElement BindAutoExpand<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseTreeView
        {
            t.SetBinding(Properties.autoExpand, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement ItemExpandedChanged<TVisualElement>(this TVisualElement t, Action<TreeViewExpansionChangedArgs> itemExpandedChanged) where TVisualElement : BaseTreeView
        {
            t.itemExpandedChanged += itemExpandedChanged;

            return t;
        }

        public static TVisualElement ItemsChosen<TVisualElement>(this TVisualElement t, Action<IEnumerable<System.Object>> itemsChosen) where TVisualElement : BaseTreeView
        {
            t.itemsChosen += itemsChosen;

            return t;
        }

        public static TVisualElement SelectionChanged<TVisualElement>(this TVisualElement t, Action<IEnumerable<System.Object>> selectionChanged) where TVisualElement : BaseTreeView
        {
            t.selectionChanged += selectionChanged;

            return t;
        }

        public static TVisualElement SelectedIndicesChanged<TVisualElement>(this TVisualElement t, Action<IEnumerable<Int32>> selectedIndicesChanged) where TVisualElement : BaseTreeView
        {
            t.selectedIndicesChanged += selectedIndicesChanged;

            return t;
        }

        public static TVisualElement ItemIndexChanged<TVisualElement>(this TVisualElement t, Action<Int32, Int32> itemIndexChanged) where TVisualElement : BaseTreeView
        {
            t.itemIndexChanged += itemIndexChanged;

            return t;
        }

        public static TVisualElement ItemsSourceChanged<TVisualElement>(this TVisualElement t, Action itemsSourceChanged) where TVisualElement : BaseTreeView
        {
            t.itemsSourceChanged += itemsSourceChanged;

            return t;
        }

        public static TVisualElement CanStartDrag<TVisualElement>(this TVisualElement t, Func<CanStartDragArgs, Boolean> canStartDrag) where TVisualElement : BaseTreeView
        {
            t.canStartDrag += canStartDrag;

            return t;
        }

        public static TVisualElement SetupDragAndDrop<TVisualElement>(this TVisualElement t, Func<SetupDragAndDropArgs, StartDragArgs> setupDragAndDrop) where TVisualElement : BaseTreeView
        {
            t.setupDragAndDrop += setupDragAndDrop;

            return t;
        }

        public static TVisualElement DragAndDropUpdate<TVisualElement>(this TVisualElement t, Func<HandleDragAndDropArgs, DragVisualMode> dragAndDropUpdate) where TVisualElement : BaseTreeView
        {
            t.dragAndDropUpdate += dragAndDropUpdate;

            return t;
        }

        public static TVisualElement HandleDrop<TVisualElement>(this TVisualElement t, Func<HandleDragAndDropArgs, DragVisualMode> handleDrop) where TVisualElement : BaseTreeView
        {
            t.handleDrop += handleDrop;

            return t;
        }
    }
}
