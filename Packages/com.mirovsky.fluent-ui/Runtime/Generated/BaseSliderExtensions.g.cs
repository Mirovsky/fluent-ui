// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine.UIElements;

    public static class FluentUIBaseSliderExtensions
    {
        public static TVisualElement ValueWithoutNotify<TVisualElement, TValueType>(this TVisualElement t, TValueType newValue) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetValueWithoutNotify(newValue);

            return t;
        }

        public static TVisualElement AdjustDragElement<TVisualElement, TValueType>(this TVisualElement t, Single factor) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.AdjustDragElement(factor);

            return t;
        }

        public static TVisualElement PageSize<TVisualElement, TValueType>(this TVisualElement t, Single pageSize) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.pageSize = pageSize;

            return t;
        }

        public static TVisualElement BindPageSize<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetBinding(Properties.pageSize, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement ShowInputField<TVisualElement, TValueType>(this TVisualElement t, Boolean showInputField) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.showInputField = showInputField;

            return t;
        }

        public static TVisualElement BindShowInputField<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetBinding(Properties.showInputField, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement Fill<TVisualElement, TValueType>(this TVisualElement t, Boolean fill) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.fill = fill;

            return t;
        }

        public static TVisualElement BindFill<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetBinding(Properties.fill, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement Direction<TVisualElement, TValueType>(this TVisualElement t, SliderDirection direction) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.direction = direction;

            return t;
        }

        public static TVisualElement BindDirection<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetBinding(Properties.direction, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }

        public static TVisualElement Inverted<TVisualElement, TValueType>(this TVisualElement t, Boolean inverted) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.inverted = inverted;

            return t;
        }

        public static TVisualElement BindInverted<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : BaseSlider<TValueType> where TValueType : IComparable<TValueType>
        {
            t.SetBinding(Properties.inverted, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));

            return t;
        }
    }
}
