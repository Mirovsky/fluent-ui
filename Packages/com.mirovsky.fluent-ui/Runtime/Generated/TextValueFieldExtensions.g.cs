// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine.UIElements;
    
    public static class FluentUITextValueFieldExtensions
    {
        public static TVisualElement ValueWithoutNotify<TVisualElement, TValueType>(this TVisualElement t, TValueType newValue) where TVisualElement : TextValueField<TValueType>
        {
            t.SetValueWithoutNotify(newValue);
            
            return t;
        }
        
        public static TVisualElement FormatString<TVisualElement, TValueType>(this TVisualElement t, String formatString) where TVisualElement : TextValueField<TValueType>
        {
            t.formatString = formatString;
            
            return t;
        }
        
        public static TVisualElement BindFormatString<TVisualElement, TValueType>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : TextValueField<TValueType>
        {
            t.SetBinding(Properties.formatString, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
