// <auto-generated/>

namespace FluentUI
{
    using System;
    using UnityEngine;
    using UnityEngine.UIElements;
    
    public static class FluentUIImageExtensions
    {
        
        public static TVisualElement Image<TVisualElement>(this TVisualElement t, Texture image) where TVisualElement : Image
        {
            t.image = image;
            
            return t;
        }
        
        public static TVisualElement BindImage<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.image, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Sprite<TVisualElement>(this TVisualElement t, Sprite sprite) where TVisualElement : Image
        {
            t.sprite = sprite;
            
            return t;
        }
        
        public static TVisualElement BindSprite<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.sprite, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement VectorImage<TVisualElement>(this TVisualElement t, VectorImage vectorImage) where TVisualElement : Image
        {
            t.vectorImage = vectorImage;
            
            return t;
        }
        
        public static TVisualElement BindVectorImage<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.vectorImage, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement SourceRect<TVisualElement>(this TVisualElement t, Rect sourceRect) where TVisualElement : Image
        {
            t.sourceRect = sourceRect;
            
            return t;
        }
        
        public static TVisualElement BindSourceRect<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.sourceRect, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement Uv<TVisualElement>(this TVisualElement t, Rect uv) where TVisualElement : Image
        {
            t.uv = uv;
            
            return t;
        }
        
        public static TVisualElement BindUv<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.uv, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement ScaleMode<TVisualElement>(this TVisualElement t, ScaleMode scaleMode) where TVisualElement : Image
        {
            t.scaleMode = scaleMode;
            
            return t;
        }
        
        public static TVisualElement BindScaleMode<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.scaleMode, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
        
        public static TVisualElement TintColor<TVisualElement>(this TVisualElement t, Color tintColor) where TVisualElement : Image
        {
            t.tintColor = tintColor;
            
            return t;
        }
        
        public static TVisualElement BindTintColor<TVisualElement>(this TVisualElement t, String propertyName, object localDataSource = null, BindingMode bindingMode = BindingMode.ToTarget) where TVisualElement : Image
        {
            t.SetBinding(Properties.tintColor, BindingsRepository.GetCachedOrCreateBinding(propertyName, localDataSource, bindingMode));
            
            return t;
        }
    }
}
